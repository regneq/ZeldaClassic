//General-Use Arrays with Getter/Setter functions

//A generic array, pre-included with all quests. 

namespace std
{
	untyped GlobalRAM[4096];
	
	/*************************\
	| GlobalRAM[] Information |
	v--------------------------
	*  Because this is the first global array that will likely be declared, called from the 'import "std.zh"' 
	*  directive in scripts, or from the buffer; as the import directive for std.zh is usually the very first
	*  instruction in any compilation attempt; this array will automatically have the highest numbered pointer.
	*  This means that if it is added after a quest is made, it will be unavailable for use in existing SAVES
	*  but it will not change the ordering of other arrays, or variables. 
	
	*  Thus, running the quest on an old SAVE will NOT break anything, but it allows a quest developer who uses
	*  this feature FROM THE ONSET, before releasing a agme, to EASILY go back in, and add global values EVEN
	*  after releasing a quest, and with people playing it, WITHOUT invalidating their saved games; and it 
	*  WILL allow them to use the new variables. 
	
	*  It's essentially a catch-all for questmakers, as a way to later expand a quest, without breaking player
	*  save files, or requiring them to start from scratch, to play the update. 
	*/
	
	//Data Handling Functions

	//Get the value of any 'indx' in the generic array.
	float GetRAM(int indx)
	{
		return GlobalRAM[indx];
	}

	//Set the value of any 'indx', to a specific amount 'value'.
	void SetRAM(int indx, int value)
	{
		GlobalRAM[indx] = value;
	}

	//Increase the value of any 'indx' by +1.
	void IncRAM(int indx) 
	{
		++GlobalRAM[indx];
	}

	//Increase the value of any 'indx' by 'amount'.
	void IncRAM(int indx, int amount)
	{
		GlobalRAM[indx] += amount;
	}

	//Decrease the value of any 'indx' by -1.
	void DecRAM(int indx)
	{
		--GlobalRAM[indx];
	}

	//Decrease the value of any 'indx' by 'amount'.
	void DecRAM(int indx, int amount)
	{
		GlobalRAM[indx] -= amount;
	}

	//Stores the pointer of any array to an inmdex of GlobalRAM to allow accessing it from any script. 
	void StoreArrayPointer(untyped arr, int indx)
	{
		GlobalRAM[indx] = arr;
	}
} //std
