namespace dmapinfo
{
	enum dmapgridpositions
	{ 
		/*The Grid[index] is the row, with leftmost being 0.
		/ The grid values are OR'd together, with MSB at left, and LSB at right, so, 
		/ if the top-rightmost screen is marked visible, then Grid[0] will == 1, 
		/ if the bottom-leftmost screen is marked visible, then Grid[7] will == 128
		/ if both the top-leftmost and top-rightmost screens are marked visible, then 
		/ Grid[0] will == 129
		*/
		dmMAPGRID_ROW_0, dmMAPGRID_ROW_1, dmMAPGRID_ROW_2, dmMAPGRID_ROW_3,
		dmMAPGRID_ROW_4, dmMAPGRID_ROW_5, dmMAPGRID_ROW_6, dmMAPGRID_ROW_7,
		dmMAPGRID_COL_7 = 1, dmMAPGRID_COL_6, dmMAPGRID_COL_5 = 4, dmMAPGRID_COL_4 = 8,
		dmMAPGRID_COL_3 = 16, dmMAPGRID_COL_2 = 32, dmMAPGRID_COL_1 = 64, dmMAPGRID_COL_0 = 128
	};
	int GetGridColumnValue(int c)
	{
		switch(c)
		{
			case 0: return dmMAPGRID_COL_0;
			case 1: return dmMAPGRID_COL_1;
			case 2: return dmMAPGRID_COL_2;
			case 3: return dmMAPGRID_COL_3;
			case 4: return dmMAPGRID_COL_4;
			case 5: return dmMAPGRID_COL_5;
			case 6: return dmMAPGRID_COL_6;
			case 7: return dmMAPGRID_COL_7;
			default:
			{ 
				printf("Invalid Column ID (%d) passed to dmapinfo::GetGridColumnValue().\nLegal values are 0 to 7.\n", c);
				return -1;
			}
		}
	}
	bool VisibleOnDungeonMap(int x, int y)
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		return (dm->Grid[y]&(128>>x));
	}
	bool VisibleOnDungeonMap()
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		int scr = Game->GetCurScreen();
		int col = (scr % 0x10)-Game->DMapOffset[dm->ID];
		int row = (scr>>4);
		//screen-Game->DMapOffset[dm->ID];
		//could get screen X and Y from curscreen and dmapoffset in a separate function
		return (dm->Grid[row]&((128>>col)));
	}
	bool VisibleOnDungeonMap(int scr)
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		int col = (scr % 0x10)-Game->DMapOffset[dm->ID];
		int row = (scr>>4);
		return (dm->Grid[row]&((128>>col)));
	}
	bool VisibleOnDungeonMap(dmapdata dm)
	{
		int scr = Game->GetCurScreen();
		int col = (scr % 0x10)-Game->DMapOffset[dm->ID];
		int row = (scr>>4);
		return (dm->Grid[row]&((128>>col)));
	}
	bool VisibleOnDungeonMap(dmapdata dm, int scr)
	{
		int col = (scr % 0x10)-Game->DMapOffset[dm->ID];
		int row = (scr>>4);
		return (dm->Grid[row]&((128>>col)));
	}
	bool VisibleOnDungeonMap(dmapdata dm, int x, int y)
	{
		//could get screen X and Y from curscreen and dmapoffset in a separate function
		return (dm->Grid[y]&(128>>x));
	}
	bool VisibleOnDungeonMap(bool no_offset)
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		int scr = Game->GetCurScreen();
		int col = (scr % 0x10) - (no_offset ? 0 : Game->DMapOffset[dm->ID]);
		int row = (scr>>4);
		//screen-Game->DMapOffset[dm->ID];
		//could get screen X and Y from curscreen and dmapoffset in a separate function
		return (dm->Grid[row]&((128>>col)));
	}
	bool VisibleOnDungeonMap(int scr, bool no_offset)
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		int col = (scr % 0x10) - (no_offset ? 0 : Game->DMapOffset[dm->ID]);
		int row = (scr>>4);
		return (dm->Grid[row]&((128>>col)));
	}
	bool VisibleOnDungeonMap(dmapdata dm, bool no_offset)
	{
		int scr = Game->GetCurScreen();
		int col = (scr % 0x10) - (no_offset ? 0 : Game->DMapOffset[dm->ID]);
		int row = (scr>>4);
		return (dm->Grid[row]&((128>>col)));
	}
	bool VisibleOnDungeonMap(dmapdata dm, int scr, bool no_offset)
	{
		int col = (scr % 0x10) - (no_offset ? 0 : Game->DMapOffset[dm->ID]);
		int row = (scr>>4);
		return (dm->Grid[row]&((128>>col)));
	}
	void SetVisibleOnDungeonMap(int x, int y, bool state)
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		(state) ? (dm->Grid[y] |= (128>>x)) : (dm->Grid[y] ~= (128>>x));
	}
	void SetVisibleOnDungeonMap(bool state)
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		int scr = Game->GetCurScreen();
		int col = (scr % 0x10)-Game->DMapOffset[dm->ID];
		int row = (scr>>4);
		//screen-Game->DMapOffset[dm->ID];
		//could get screen X and Y from curscreen and dmapoffset in a separate function
		(state) ? (dm->Grid[row] |= ((128>>col))) : (dm->Grid[row] ~= ((128>>col)));
	}
	void SetVisibleOnDungeonMap(int scr, bool state)
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		int col = (scr % 0x10)-Game->DMapOffset[dm->ID];
		int row = (scr>>4);
		(state) ? (dm->Grid[row] |= ((128>>col))) : (dm->Grid[row] ~= ((128>>col)));
	}
	void SetVisibleOnDungeonMap(dmapdata dm, bool state)
	{
		int scr = Game->GetCurScreen();
		int col = (scr % 0x10)-Game->DMapOffset[dm->ID];
		int row = (scr>>4);
		(state) ? (dm->Grid[row] |= ((128>>col))) : (dm->Grid[row] ~= ((128>>col)));
	}
	void SetVisibleOnDungeonMap(dmapdata dm, int scr, bool state)
	{
		int col = (scr % 0x10)-Game->DMapOffset[dm->ID];
		int row = (scr>>4);
		(state) ? (dm->Grid[row] |= ((128>>col))) : (dm->Grid[row] ~= ((128>>col)));
	}
	void SetVisibleOnDungeonMap(dmapdata dm, int x, int y, bool state)
	{
		//could get screen X and Y from curscreen and dmapoffset in a separate function
		(state) ? (dm->Grid[y] |= (128>>x)) : (dm->Grid[y] ~= (128>>x));
	}
	void SetVisibleOnDungeonMap(bool no_offset, bool state)
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		int scr = Game->GetCurScreen();
		int col = (scr % 0x10) - (no_offset ? 0 : Game->DMapOffset[dm->ID]);
		int row = (scr>>4);
		//screen-Game->DMapOffset[dm->ID];
		//could get screen X and Y from curscreen and dmapoffset in a separate function
		(state) ? (dm->Grid[row] |= ((128>>col))) : (dm->Grid[row] ~= ((128>>col)));
	}
	void SetVisibleOnDungeonMap(int scr, bool no_offset, bool state)
	{
		dmapdata dm = Game->LoadDMapData(Game->GetCurDMap());
		int col = (scr % 0x10) - (no_offset ? 0 : Game->DMapOffset[dm->ID]);
		int row = (scr>>4);
		(state) ? (dm->Grid[row] |= ((128>>col))) : (dm->Grid[row] ~= ((128>>col)));
	}
	void SetVisibleOnDungeonMap(dmapdata dm, bool no_offset, bool state)
	{
		int scr = Game->GetCurScreen();
		int col = (scr % 0x10) - (no_offset ? 0 : Game->DMapOffset[dm->ID]);
		int row = (scr>>4);
		(state) ? (dm->Grid[row] |= ((128>>col))) : (dm->Grid[row] ~= ((128>>col)));
	}
	void SetVisibleOnDungeonMap(dmapdata dm, int scr, bool no_offset, bool state)
	{
		int col = (scr % 0x10) - (no_offset ? 0 : Game->DMapOffset[dm->ID]);
		int row = (scr>>4);
		(state) ? (dm->Grid[row] |= ((128>>col))) : (dm->Grid[row] ~= ((128>>col)));
	}
}

