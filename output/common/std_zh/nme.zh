namespace nme
{
	const int INFO = 31;
	const int ERR_RETURN = -214748;
	npc script genericnpc
	{
		void run()
		{
			enum { nPVHP, nHPDIFF, nLAST };
			untyped info[nLAST];
			this->Misc[INFO] = info;
			info[nPVHP] = this->HP;
			//can get any data n the info[] array from one misc
			while(1)
			{
				if ( this->HP != info[nPVHP] )
				{
					info[nHPDIFF] = this->HP-info[nPVHP]; //will be negative if damaged, positive if healed
					info[nPVHP] = this->HP;
				}
				Waitframe();
			}
				
		}
		untyped getinfo(int inx)
		{
			untyped ptr = this->Misc[INFO];
			return ptr[inx];
		}
	}
	
	untyped getnpcinfo(npc n, int inx)
	{
		unless(n->isValid())
		{
			printf("Invalid npc pointer (%f) used to access getnpcinfo()\n", <int>n);
			return ERR_RETURN;
		}
		int ptr = n->Misc[INFO];
		unless(IsValidArray(ptr))
		{
			printf("The npc (%f) used with getnpcinfo() does not have a valid info array.\n", <int>n);
			return ERR_RETURN;
		}
		return ptr[inx];
	}
}

//unless ( nme::getnpcinfo(n, inx) == nme::ERR_RETURN ) do_something()
		