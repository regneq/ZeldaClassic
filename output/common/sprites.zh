namespace sprites
{
	//returns true if the sprite is visible, false if not.
	//Link
	void rectify(int scale)
	{
		int scale = Link->Scale > 0 ? Link->Scale : 1;
		Link->DrawXOffset = 16 - ((Link->TileWidth * 16) * (scale - 1))/2;
		Link->DrawYOffset = 16 - ((Link->TileHeight * 16) * (scale - 1))/2;
		Link->HitXOffset = 16 - (Link->HitWidth * (scale - 1))/2;
		Link->HitYOffset = 16 - (Link->HitHeight * (scale - 1))/2;
		Link->HitWidth = 16 * scale;
		Link->HitHeight = 16 * scale;
	}
	void rectify(npc n)
	{
		int scale = n->Scale > 0 ? n->Scale : 1;
		npcdata nd = Game->LoadNPCData(n->ID);
		n->DrawXOffset = nd->DrawXOffset - ((nd->TileWidth * 16) * (scale - 1))/2;
		n->DrawYOffset = nd->DrawYOffset - ((nd->TileHeight * 16) * (scale - 1))/2;
		n->HitXOffset = nd->HitXOffset - (nd->HitWidth * (scale - 1))/2;
		n->HitYOffset = nd->HitYOffset - (nd->HitHeight * scale - 1)/2;
		n->HitWidth = nd->HitWidth * scale;
		n->HitHeight = nd->HitHeight * scale;
	}
	void rectify(item n)
	{
		int scale = n->Scale > 0 ? n->Scale : 1;
		itemdata nd = Game->LoadItemData(n->ID);
		n->DrawXOffset = nd->DrawXOffset - ((nd->TileWidth * 16) * (scale - 1))/2;
		n->DrawYOffset = nd->DrawYOffset - ((nd->TileHeight * 16) * (scale - 1))/2;
		n->HitXOffset = nd->HitXOffset - (nd->HitWidth * (scale - 1))/2;
		n->HitYOffset = nd->HitYOffset - (nd->HitHeight * scale - 1)/2;
		n->HitWidth = nd->HitWidth * scale;
		n->HitHeight = nd->HitHeight * scale;
	}
	void rectify(lweapon n)
	{
		int scale = n->Scale > 0 ? n->Scale : 1;
		itemdata nd = Game->LoadItemData(n->Parent);
		n->DrawXOffset = nd->WeaponDrawXOffset - ((nd->WeaponTileWidth * 16) * (scale - 1))/2;
		n->DrawYOffset = nd->WeaponDrawYOffset - ((nd->WeaponTileHeight * 16) * (scale - 1))/2;
		n->HitXOffset = nd->WeaponHitXOffset - (nd->WeaponHitWidth * (scale - 1))/2;
		n->HitYOffset = nd->HitYOffset - (nd->WeaponHitHeight * scale - 1)/2;
		n->HitWidth = nd->WeaponHitWidth * scale;
		n->HitHeight = nd->WeaponHitHeight * scale;
	}
	void rectify(eweapon n)
	{
		int scale = n->Scale > 0 ? n->Scale : 1;
		npcdata nd = Game->LoadNPCData(n->Parent);
		//n->DrawXOffset = nd->WeaponDrawXOffset - ((nd->WeaponTileWidth * 16) * (scale - 1))/2;
		//n->DrawYOffset = nd->WeaponDrawYOffset - ((nd->WeaponTileHeight * 16) * (scale - 1))/2;
		//n->HitXOffset = nd->WeaponHitXOffset - (nd->WeaponHitWidth * (scale - 1))/2;
		//n->HitYOffset = nd->WeaponHitYOffset - (nd->WeaponHitHeight * scale - 1)/2;
		//n->HitWidth = nd->WeaponHitWidth * scale;
		//n->HitHeight = nd->WeaponHitHeight * scale;
	}
}

itemsprite script fall
{
	void main()
	{
		this->Z = 100;
		while(this->isValid())
		{
			
			this->Scale = this->Z/50;
			if ( this->Scale <= 1 ) { this->Scale = 1; sprites::rectify(this); Quit(); }
			sprites::rectify(this);
			Waitframe();
			
		}
	}
}