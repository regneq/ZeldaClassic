Docs for how ZScript/ZASM Accesses Memory
v0.1
27th January, 2020
***Waning: May be incomplete, wrong, or not fully comprehensive at this time***

ZScript Array

Declaration/Allocation
With no initialisers:
1 Push a register (A) to store the pointer.
2. Allocate the array internaly to give it a pointer and to save the address 
	of the pointer to a map with  <ALLOCATEMEMV (A),(Pointer ID)>
3. Set up the stack to read it:
	SETR
	ADDV
	STOREI
	
With initialisers that are constant/literal:
1 Push a register (A) to store the pointer.
2. Allocate the array internaly to give it a pointer and to save the address 
	of the pointer to a map with  <ALLOCATEMEMV (A),(Pointer ID)>
3. Set up the stack to read it:
	SETR
	ADDV
	STOREI
4. Push each initialiser to the stack:
	Set script register (D0) to the array pointer.
	(then, for each initialiser)
		Push script register (D0) to the script stack.
		Set the value of script register (D2) with the literal.
		Pop D0 from the stack.
		Set the value of script register (D1) with the array index.
		Set register SCRIPTRAM with the value of (D2) using < SETR SCRIPTRAM,d2 >

Overview of Access
To get the internal location of foo[0]
1 Push the pointer of foo to a register
2 Find the memory location of that, internally
3 Set the array index value to a register.
4 Find that value from step 2, internally
5 Pop the registers used to access the array immediately.

Deallocation:
	Set script register (D6) to the stored SP value in script register (d4).
	Call ADDV (AddImmediate)
	Call LOADI (LoadIndirect) putting the array pointer into a script register.
	Call DEALLOCATEMEMR on that register.
	Set the register that held the pointer to 0.
	Pop that register.
	
ZScript Variable
Initial declaration:

1 Push a register (A) to the stack for the variable.
2	If assigned to 0 or not assigned:
	If assigned to a literal:
		Immediately set that value to the register (A) with <SETV, (A), value>.
			This is done with precompiled values in ASM.
	If assigned to another var:
		This reads the stack to get the second register value.
		Set the value of register (A) with register (B) with <SETR, (A), (B)>.
	If assigned to an array index value:
		Push a register (P) for the array pointer.
		Push a register (I) for the array index.
		Push a register (V) for the index value.
		Find the array value internally and assign it to register V.
		Set register V to register (A) with <SETR, (A), (V)>.
		Pop P, I and V.
Write the to a register.
3  Write it to the stack array internallty if local, or to the gd index register if global.
4 if local, pop the register when the script exits.


if the variable was already declared, then we skip 1
so, assign to a var is two steps
if assigning a var to a var, then we need to use another re to hold the value for that accordingly
if arrray value to array value, then we have to do array access for EACH
so, var=lit is fastest
as it van use stuff like SETR, reg, value
maybe SETV
Need to look there
var to var assign is slightly slower
In ranking os performance
1 Assign literal to variable.
2 Assign variable to variable.
3 Assign literal to array index.
4 Assign variable to array index.
5 Assign array index value to array index.
1 is fastest
there are some optimisations we have yet to do that might be feasible, but nothing super-critical
array creation is slower than array access
as it also needs to call ALLOCATEMEM
hence why you want to use arrays at the highest viable scope in functions